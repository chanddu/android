(define (make-empty-bst)
	'()
)
(define (empty-bst? bst)
	(null? bst)
)
(define (make-bst val ls rs)
	(list val ls rs)
)
(define (bst-v bst)
	(car bst)
)
(define (bst-ls bst)
	(cadr bst)
)
(define (bst-rs bst)
	(caddr bst)
)
(define (is-leaf bst)
	(and (empty-bst? (bst-ls bst)) (empty-bst? (bst-rs bst)))
)
;minimum distance from root to the leaf
;inserting an element
(define (bst-insert v bst)
	(cond ((empty-bst? bst) (make-bst v (make-empty-bst) (make-empty-bst)))
	      ((< v (bst-v bst)) (make-bst (bst-v bst)(bst-insert v (bst-ls bst)) (bst-rs bst)))
	      ((> v (bst-v bst)) (make-bst (bst-v bst)(bst-ls bst)(bst-insert v (bst-rs bst))))
	)
)
;changing a list to a bst
(define (first-of-list lst)
	(car lst)
)
(define (rest-of-list lst)
	(cdr lst)
)
(define (empty-lst? lst)
	(null? lst)
)
(define (lst-2-bst lst)
	(define (bst-from-lst lst bst)
		(if(empty-lst? lst) 
			bst
		    (bst-from-lst (rest-of-list lst) (bst-insert (first-of-list lst) bst))
		)
	)
	(bst-from-lst (rest-of-list lst) (make-bst (first-of-list lst) (make-empty-bst) (make-empty-bst)))
)
(define (bst-sort bst)
	(if (empty-bst? bst)
		'()
	(append (bst-sort (bst-ls bst)) (list (bst-v bst)) (bst-sort (bst-rs bst))))
)
(define (list-sort lst)
	(bst-sort (lst-2-bst lst))
)
(define (sorted-bst-frm-lst lst)
	(lst-2-bst (list-sort lst))
)
(define (left-most-val-in-bst bst)
	(if (empty-bst? (bst-ls bst))
		(bst-v bst)
		(left-most-val-in-bst (bst-ls bst))
	)
)
(define (right-most-val-in-bst bst)
	(if (empty-bst? (bst-rs bst))
		(bst-v bst)
		(right-most-val-in-bst bst)
	)
)
(define (bst-delete v bst)
	(cond ((= v (bst-v bst)) 
			(cond ((is-leaf bst) (make-empty-bst))
				  ((empty-bst? (bst-rs bst)) (bst-ls bst))
				  ((empty-bst? (bst-ls bst)) (bst-rs bst))
				  (else (make-bst (left-most-val-in-bst (bst-rs bst)) (bst-ls bst) (bst-delete (left-most-val-in-bst (bst-rs bst)) (bst-rs bst))))
			)
		   )	
		  ((< v (bst-v bst)) (make-bst (bst-v bst) (bst-delete v (bst-ls bst)) (bst-rs bst)))
		  ((> v (bst-v bst)) (make-bst (bst-v bst) (bst-ls bst) (bst-delete v (bst-rs bst))))
	)
)
;(20 (10 () (16 (13 () ()) (18 (17 () ()) (19 () ())))) (21 () ()))