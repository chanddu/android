breakpoint;
alias currentPID S0;
currentPID = (PTBR - 1024) / 8;
alias currentPCB S1;
currentPCB = READY_LIST + 32 * currentPID;
if([currentPCB + 0 + 1] != 2)then
	[currentPCB + 0 + 1] = [currentPCB + 0 + 1];
else
	[currentPCB + 0 + 1] = 1;
endif;
[currentPCB + 0 + 2] = BP;
[currentPCB + 0 + 3] = SP - 1;

alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512) ] * 512) + (SP % 512);
[currentPCB + 0 + 4] = [physicalSP];
[currentPCB + 0 + 5] = PTBR;
[currentPCB + 0 + 6] = PTLR;
[currentPCB + 7 ] = R0;
[currentPCB + 8 ] = R1;
[currentPCB + 9 ] = R2;
[currentPCB + 10 ] = R3;
[currentPCB + 11 ] = R4;
[currentPCB + 12 ] = R5;
[currentPCB + 13 ] = R6;
[currentPCB + 14 ] = R7;
breakpoint;
alias temp S3;
alias newPCB S4;
newPCB = currentPCB;
temp = currentPCB + 32;
while( temp != currentPCB) do
	if( [temp + 1] == 1) then
		newPCB = temp;
		break;
	endif;
	if( temp == (READY_LIST + 32 * 31)) then
		temp = READY_LIST;
	else
		temp = temp + 32;
	endif;
endwhile;
breakpoint;
BP = [newPCB + 2];
SP = [newPCB + 3];
R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];
PTBR = [newPCB + 5];
PTLR = [newPCB + 6];

SP = SP + 1;

alias newphysicalSP S2;
newphysicalSP = ([PTBR + 2 * (SP / 512) ] * 512) + (SP % 512);
[newphysicalSP] = [newPCB + 4];
[newPCB + 1] = 2;

ireturn;
