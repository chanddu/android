alias Cause S0;
alias VPagenum S1;
alias Ip_addr S2;
alias physicalPageNum S3;
alias temp S4;
alias victim S5;
alias count S6;
alias counter S7;
alias physicalSP S8;
SP = SP + 1;
physicalSP = ([PTBR + 2 * (SP/512)] * 512) + (SP % 512);

Cause = EFR % 10;		// Gets value of cause field (size 1 char)
VPagenum = (EFR / 10) % 100;    // Gets value of BadVAddr
Ip_addr = (EFR/1000);		//Gets value of IP at the point of exception

if(Cause == 0)then
  physicalPageNum = [PTBR + 2*VPagenum];
  if(physicalPageNum==-1)then
    inline "JMP 11776";
  else
    temp = 0;
    while(temp<64)do
      if([MEM_LIST + temp]==0)then
        [MEM_LIST + temp] = 1;        //checking for empty page
        victim = temp;
        break;
      endif;
      temp = temp +1;
    endwhile;
    if(temp>=64)then
      victim = -1;
      temp = PAGE_TABLE;
      while(temp<1280)do
        count=1;
        while(count<6)do                    //6 because stack should not be victim
          if([temp + count] == "11")then
            [temp + count] = "01";
          else
            if([temp + count] == "01")then     //indicates reference bit 0
              counter = 448;
              while([DISK_LIST+counter]<511)do
                if([DISK_LIST+counter] == 0)then            //second chance page replacement algorithm
                  victim = [temp + count - 1];
                  store(victim,counter);
                  [MEM_LIST + victim] = 0;
                  [DISK_LIST + counter] = 1;
                  [temp + count - 1] = counter;
                  [temp + count] = "00";
                  break;
                endif;
                counter = counter + 1;
              endwhile;
            endif;
          endif;
          count = count + 2;
        endwhile;
        temp = temp + 8;
      endwhile;
    endif;
    if(victim == -1)then
      inline "JMP 11776";
    else
      if(physicalPageNum>=448)then
        [3072 + physicalPageNum] = [3072 + physicalPageNum] - 1;
        load(victim,physicalPageNum);
      else
        load(victim,physicalPageNum);            //loading from disk to victim page
      endif;
      [PTBR + 2*VPagenum] = victim;
      breakpoint;                               //setting new page table entry
      [PTBR + 2*VPagenum + 1] = "11";
      [physicalSP] = Ip_addr;                   //setting ip address
    endif;
    breakpoint;
    ireturn;
  endif;

else
  if(Cause==1)then
    print ("Illegal instruction");
  endif;
  if(Cause==2)then
    print("Illegal memory access");
  endif;
  if(Cause==3)then                        //printing other errors according to cause
    print("Arithmetic exception");
  endif;
  if(Cause==4)then
    print("Illegal operands");
  endif;
  inline "JMP 11776";
endif;
