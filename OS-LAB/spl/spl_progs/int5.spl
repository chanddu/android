alias PhysicalSP S0;
alias SystemCallNo S1;
alias childPID S2;
PhysicalSP = ([PTBR + 2 * (SP/512)] * 512) + (SP % 512);
SystemCallNo = [PhysicalSP - 1];
if(SystemCallNo==8)then
	childPID = 0;
	while(childPID<32)do
		if([READY_LIST + (childPID*32) + 1]==0) then    	// Searching for empty PCB Entry
			break;
		endif;
		childPID = childPID +1;
	endwhile;
	if(childPID>=32)then
		[PhysicalSP - 2] = -1;				// returning with error-no free PCB Entry
		ireturn;
	else
		[READY_LIST + (childPID * 32)] = childPID;		
	endif;
	alias validPageCount S3;
	validPageCount = 0;
	while(validPageCount <= 4)do 				//checking for the number of valid pages
		if([PTBR + (2 * validPageCount) + 1] == "01" || [PTBR + (2 * validPageCount) + 1] == "11")then
			validPageCount = validPageCount + 1;
		else
			break;
		endif;
	endwhile;
	alias iterator S4;
	alias freePageCount S5;
	iterator = 0;
	freePageCount = 0;
	while(iterator<64)do
		if([iterator + MEM_LIST]==0)then
			freePageCount = freePageCount + 1;		//checking for free pages in MEM_LIST
		endif;
		if(freePageCount >= validPageCount)then			
			break ;
		endif;
		iterator = iterator + 1;
	endwhile;
	if(freePageCount < validPageCount)then //if free pages are less than that required
		[PhysicalSP - 1] = -1;
		ireturn;
	endif;
	iterator = 0;
	alias count S6;
	count = 0;
	while(iterator<64 && count<validPageCount)do
		if([MEM_LIST+iterator] == 0)then
			[MEM_LIST+iterator] = 1;
			alias physicalPageNo S7;
			physicalPageNo = [PTBR + 2*count];		//obtaining physical page number
			alias counter S8;
			counter = 0;
			while(counter<512)do
				[iterator*512 + counter] = [physicalPageNo*512 + counter];
				counter = counter + 1;
			endwhile;
			[PAGE_TABLE + (childPID*8) + (2*count)] = iterator;
			[PAGE_TABLE + (childPID*8)  + (2*count) + 1] = [PTBR + (2*count) + 1];
			count = count + 1;
		endif;
		iterator = iterator + 1;
	endwhile;
	[READY_LIST + (childPID * 32) + 5] = 1024 + (childPID * 8); //setting new PCB entry
	[READY_LIST + (childPID * 32) + 4] = [PhysicalSP];
	[READY_LIST + (childPID * 32) + 3] = SP - 1;
	[READY_LIST + (childPID * 32) + 2] = BP;
	[READY_LIST + (childPID * 32) + 6] = PTLR;
	[READY_LIST + (childPID * 32) + 7] = R0;
	[READY_LIST + (childPID * 32) + 8] = R1;		//copying general purpose registers and SP and BP
	[READY_LIST + (childPID * 32) + 9] = R2;
	[READY_LIST + (childPID * 32) + 10] = R3;
	[READY_LIST + (childPID * 32) + 11] = R4;
	[READY_LIST + (childPID * 32) + 12] = R5;
	[READY_LIST + (childPID * 32) + 13] = R6;
	[READY_LIST + (childPID * 32) + 14] = R7;
	alias parentPID S9;
	parentPID = (PTBR - 1024) / 8;
	count = 15;
	while(count < 31)do
		[READY_LIST + (childPID * 32) + count] = [READY_LIST + (parentPID * 32) + count];
		[READY_LIST + (childPID * 32) + count + 1] = [READY_LIST + (parentPID * 32) + count + 1];	//copying per process entries
		alias temp S10;
		temp = [READY_LIST + (childPID * 32) + count];
		[FILE_TABLE + (2 * temp) + 1] = [FILE_TABLE + (2 * temp) + 1] + 1;		//increasing open file count
		count = count + 2;
	endwhile;
	[READY_LIST + (childPID * 32) + 1] = 1;
	alias childPhysicalSP S11;
	childPhysicalSP = ([(1024 + (childPID * 8)) + 2 * (SP - 1)/512]	* 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;
	[PhysicalSP - 2] = childPID ;
	ireturn;
endif;
